import { mat4 } from 'gl-matrix';
import Buffers from '../buffers/buffers';
import OrbitCamera from '../camera/orbit-camera';
import CanvasTimer from '../canvas/canvas-timer';
import { ContextMode, ContextVertexBuffers } from '../context/context';
import Subscriber from '../core/subscriber';
import Geometry from '../geometry/geometry';
import Vector2 from '../math/vector2';
import Textures, { ITextureInput } from '../textures/textures';
import Uniforms from '../uniforms/uniforms';
export default class Renderer extends Subscriber {
    gl: WebGLRenderingContext | WebGL2RenderingContext;
    program: WebGLProgram;
    timer: CanvasTimer;
    uniforms: Uniforms;
    buffers: Buffers;
    textures: Textures;
    textureList: ITextureInput[];
    W: number;
    H: number;
    mouse: Vector2;
    radians: number;
    dirty: boolean;
    animated: boolean;
    drawFunc_: (deltaTime: number) => void;
    vertexString: string;
    fragmentString: string;
    camera: OrbitCamera;
    geometry: Geometry;
    vertexBuffers: ContextVertexBuffers;
    projectionMatrix: mat4;
    modelViewMatrix: mat4;
    normalMatrix: mat4;
    mode: ContextMode;
    mesh: string;
    defaultMesh: string;
    doubleSided: boolean;
    cache: {
        [key: string]: Geometry;
    };
    workpath: string;
    constructor();
    protected render(): void;
    protected drawArrays_(deltaTime: number): void;
    protected create_(): void;
    protected createGeometry_(): void;
    protected parseGeometry_(): void;
    protected createUniforms_(): void;
    protected update_(): void;
    updateUniformNoop_(): void;
    updateUniformDelta_: (timer: CanvasTimer) => void;
    updateUniformTime_: (timer: CanvasTimer) => void;
    updateUniformDate_: () => void;
    updateUniformMouse_: () => void;
    updateUniformCamera_: () => void;
    updateUniformMesh_: () => void;
    protected updateUniformDelta__(timer: CanvasTimer): void;
    protected updateUniformTime__(timer: CanvasTimer): void;
    protected updateUniformDate__(): void;
    protected updateUniformMouse__(): void;
    protected updateUniformCamera__(): void;
    protected updateUniformMesh__(): void;
    protected updateUniformFlat__(): void;
    protected updateProjectionMatrix_(): mat4;
    protected updateModelViewMatrix_(deltaTime: number): mat4;
    protected updateNormalMatrix_(modelViewMatrix: mat4): mat4;
    setMode(mode: ContextMode): void;
    setMesh(mesh: string): void;
}
