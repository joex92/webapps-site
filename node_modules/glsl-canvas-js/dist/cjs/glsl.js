"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadAll = exports.of = void 0;
var tslib_1 = require("tslib");
var buffers_1 = require("./buffers/buffers");
Object.defineProperty(exports, "Buffer", { enumerable: true, get: function () { return buffers_1.Buffer; } });
Object.defineProperty(exports, "BufferFloatType", { enumerable: true, get: function () { return buffers_1.BufferFloatType; } });
Object.defineProperty(exports, "Buffers", { enumerable: true, get: function () { return buffers_1.default; } });
Object.defineProperty(exports, "IOBuffer", { enumerable: true, get: function () { return buffers_1.IOBuffer; } });
var orbit_camera_1 = require("./camera/orbit-camera");
Object.defineProperty(exports, "OrbitCamera", { enumerable: true, get: function () { return orbit_camera_1.default; } });
var canvas_1 = require("./canvas/canvas");
Object.defineProperty(exports, "Canvas", { enumerable: true, get: function () { return canvas_1.default; } });
var canvas_timer_1 = require("./canvas/canvas-timer");
Object.defineProperty(exports, "CanvasTimer", { enumerable: true, get: function () { return canvas_timer_1.default; } });
var chunks_1 = require("./context/chunks");
Object.defineProperty(exports, "DefaultWebGL2BufferFragment", { enumerable: true, get: function () { return chunks_1.DefaultWebGL2BufferFragment; } });
Object.defineProperty(exports, "DefaultWebGL2BufferVertex", { enumerable: true, get: function () { return chunks_1.DefaultWebGL2BufferVertex; } });
Object.defineProperty(exports, "DefaultWebGL2FlatFragment", { enumerable: true, get: function () { return chunks_1.DefaultWebGL2FlatFragment; } });
Object.defineProperty(exports, "DefaultWebGL2MeshFragment", { enumerable: true, get: function () { return chunks_1.DefaultWebGL2MeshFragment; } });
Object.defineProperty(exports, "DefaultWebGL2MeshVertex", { enumerable: true, get: function () { return chunks_1.DefaultWebGL2MeshVertex; } });
Object.defineProperty(exports, "DefaultWebGLBufferFragment", { enumerable: true, get: function () { return chunks_1.DefaultWebGLBufferFragment; } });
Object.defineProperty(exports, "DefaultWebGLBufferVertex", { enumerable: true, get: function () { return chunks_1.DefaultWebGLBufferVertex; } });
Object.defineProperty(exports, "DefaultWebGLFlatFragment", { enumerable: true, get: function () { return chunks_1.DefaultWebGLFlatFragment; } });
Object.defineProperty(exports, "DefaultWebGLMeshFragment", { enumerable: true, get: function () { return chunks_1.DefaultWebGLMeshFragment; } });
Object.defineProperty(exports, "DefaultWebGLMeshVertex", { enumerable: true, get: function () { return chunks_1.DefaultWebGLMeshVertex; } });
var context_1 = require("./context/context");
Object.defineProperty(exports, "ContextError", { enumerable: true, get: function () { return context_1.ContextError; } });
Object.defineProperty(exports, "ContextVersion", { enumerable: true, get: function () { return context_1.ContextVersion; } });
Object.defineProperty(exports, "ContextVertexBuffers", { enumerable: true, get: function () { return context_1.ContextVertexBuffers; } });
Object.defineProperty(exports, "Context", { enumerable: true, get: function () { return context_1.default; } });
var common_1 = require("./core/common");
Object.defineProperty(exports, "Common", { enumerable: true, get: function () { return common_1.default; } });
var iterable_1 = require("./core/iterable");
Object.defineProperty(exports, "IterableStringMap", { enumerable: true, get: function () { return iterable_1.default; } });
var subscriber_1 = require("./core/subscriber");
Object.defineProperty(exports, "Subscriber", { enumerable: true, get: function () { return subscriber_1.default; } });
Object.defineProperty(exports, "Listener", { enumerable: true, get: function () { return subscriber_1.Listener; } });
var box_geometry_1 = require("./geometry/box-geometry");
Object.defineProperty(exports, "BoxGeometry", { enumerable: true, get: function () { return box_geometry_1.default; } });
var flat_geometry_1 = require("./geometry/flat-geometry");
Object.defineProperty(exports, "FlatGeometry", { enumerable: true, get: function () { return flat_geometry_1.default; } });
var geometry_1 = require("./geometry/geometry");
Object.defineProperty(exports, "Geometry", { enumerable: true, get: function () { return geometry_1.default; } });
var sphere_geometry_1 = require("./geometry/sphere-geometry");
Object.defineProperty(exports, "SphereGeometry", { enumerable: true, get: function () { return sphere_geometry_1.default; } });
var torus_geometry_1 = require("./geometry/torus-geometry");
Object.defineProperty(exports, "TorusGeometry", { enumerable: true, get: function () { return torus_geometry_1.default; } });
var obj_loader_1 = require("./loaders/obj-loader");
Object.defineProperty(exports, "ObjLoader", { enumerable: true, get: function () { return obj_loader_1.default; } });
var logger_1 = require("./logger/logger");
Object.defineProperty(exports, "Logger", { enumerable: true, get: function () { return logger_1.default; } });
var vector2_1 = require("./math/vector2");
Object.defineProperty(exports, "Vector2", { enumerable: true, get: function () { return vector2_1.default; } });
var vector3_1 = require("./math/vector3");
Object.defineProperty(exports, "Vector3", { enumerable: true, get: function () { return vector3_1.default; } });
var renderer_1 = require("./renderer/renderer");
Object.defineProperty(exports, "Renderer", { enumerable: true, get: function () { return renderer_1.default; } });
var textures_1 = require("./textures/textures");
Object.defineProperty(exports, "Textures", { enumerable: true, get: function () { return textures_1.default; } });
Object.defineProperty(exports, "isTextureData", { enumerable: true, get: function () { return textures_1.isTextureData; } });
Object.defineProperty(exports, "Texture", { enumerable: true, get: function () { return textures_1.Texture; } });
Object.defineProperty(exports, "TextureExtensions", { enumerable: true, get: function () { return textures_1.TextureExtensions; } });
Object.defineProperty(exports, "TextureFilteringType", { enumerable: true, get: function () { return textures_1.TextureFilteringType; } });
Object.defineProperty(exports, "TextureImageExtensions", { enumerable: true, get: function () { return textures_1.TextureImageExtensions; } });
Object.defineProperty(exports, "TextureSourceType", { enumerable: true, get: function () { return textures_1.TextureSourceType; } });
Object.defineProperty(exports, "TextureVideoExtensions", { enumerable: true, get: function () { return textures_1.TextureVideoExtensions; } });
var uniforms_1 = require("./uniforms/uniforms");
Object.defineProperty(exports, "Uniforms", { enumerable: true, get: function () { return uniforms_1.default; } });
Object.defineProperty(exports, "METHODS_FLOAT", { enumerable: true, get: function () { return uniforms_1.METHODS_FLOAT; } });
Object.defineProperty(exports, "METHODS_FLOATV", { enumerable: true, get: function () { return uniforms_1.METHODS_FLOATV; } });
Object.defineProperty(exports, "METHODS_INT", { enumerable: true, get: function () { return uniforms_1.METHODS_INT; } });
Object.defineProperty(exports, "METHODS_INTV", { enumerable: true, get: function () { return uniforms_1.METHODS_INTV; } });
Object.defineProperty(exports, "Uniform", { enumerable: true, get: function () { return uniforms_1.Uniform; } });
Object.defineProperty(exports, "UniformMethod", { enumerable: true, get: function () { return uniforms_1.UniformMethod; } });
Object.defineProperty(exports, "UniformTexture", { enumerable: true, get: function () { return uniforms_1.UniformTexture; } });
Object.defineProperty(exports, "UniformType", { enumerable: true, get: function () { return uniforms_1.UniformType; } });
var canvas_2 = tslib_1.__importDefault(require("./canvas/canvas"));
function of(canvas, options) {
    return canvas_2.default.items.find(function (x) { return x.canvas === canvas; }) || new canvas_2.default(canvas, options);
}
exports.of = of;
function loadAll() {
    var canvases = [].slice.call(document.getElementsByClassName('glsl-canvas')).filter(function (x) { return x instanceof HTMLCanvasElement; });
    return canvases.map(function (x) { return of(x); });
}
exports.loadAll = loadAll;
if (document) {
    document.addEventListener('DOMContentLoaded', function () {
        loadAll();
    });
}
